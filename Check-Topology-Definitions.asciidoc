This algorithm traverses the source model and checks topology definitions.

== Input

. A list _tul_ of translation units.

. An 
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[analysis 
data structure] _a_
representing the results of analysis so far.

== Output

An updated analysis _a'_ with the topology map filled in if the check 
passes; otherwise an error.

== Procedure

Visit each translation unit in _tul_ with input _a_,
yielding either _a'_ or an error.

=== AST Visitor Methods

Each method accepts an analysis data structure _a_ as input
and yields either an updated analysis data structure _a'_ or an error as 
output.

==== Translation Units

For each translation unit _tu_, visit each
definition appearing in _tu_.

==== Component Definitions

For each topology definition _d_ that has not yet
been resolved:

. Visit each member _m_ of _d_ with input _a_, building
up a topology data structure _t_.
Check each member for semantic validity.
For example, ensure that the types of the port connections
match.
Check that (i) user-specified port numbers are in bounds for their ports and (ii)
no two connections at the same output port have the same number.
If not, throw an error.
Don't check pattern validity yet, except to resolve
uses.

. Visit all topologies imported into _t_, ensuring
that they are resolved.

. Resolve _t_ to a partially numbered topology consisting
of (a) a list of instances and (b) a mapping between
connection graph names and lists of connections.
The connection end points have port numbers if and only
if those numbers are present in the model source.

.. Determine the set of all instances in _t_,
consisting of (a) all instances specified in _t_
and (b) public instances specified in topologies
imported into _t_.

.. For each connection graph name _g_ appearing in _t_
or in an imported topology, determine the set of all connections in _g_,
with multiplicity (two or more connections between
the same pairs of unnumbered ports are allowed).

... Include all connections directly specified in _t_.
Check that all connections are between instances
present in _t_.
If not, throw an error.

... Include all connections from imported topologies
that go between instances present in _t_.

.. Resolve pattern specifiers in _t_ to
and add the resulting connections to _t_.

. Check output port numbers.

.. Check that the number of connections at each output port
is in bounds for the port size.

.. Check that there are no duplicate numbers
at any output ports.

. Apply automatic numbering to _t_.
This step fills in missing port numbers, preserving
any numbers specified in the model source.

.. Apply matched numbering.
Use the algorithm described in the language spec.

.. Apply general numbering.
Use the algorithm described in the language spec.

... For each port instance _P_ involved in an
output connection _C_, if _C_ has no assigned
from port number, then find the lowest
port number available at _P_ and assign it
as the from port number.

... For each port instance _P_ involved in an
input connection _C_, if _C_ has no assigned
to port number, then assign zero as the
from port number.

. Compute the ports that are actually unused.

. Construct the unique topology symbol _s_ for _d_.

. Map _s_ to _t_ in the topology map of _a_.

. Return _a_ as the result.
