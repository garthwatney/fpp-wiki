This algorithm traverses the source model and computes
the values of constant symbols and
expressions.

== Input

. A list _tul_ of translation units.

. An 
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[analysis 
data structure] _a_
representing the results of analysis so far.
https://github.com/fprime-community/fpp/wiki/Evaluate-Implied-Enum-Constants[Evaluate Implied Enum Constants]
must have already been run.

== Output

. The analysis _a_ with an updated
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[value map],
if the check passes; otherwise an error.

== Procedure

. Visit each translation unit in _tul_ with input _a_,
yielding either a new analysis _a'_ or an error.

=== AST Visitor Methods

Each method accepts an analysis data structure _a_ as input
and yields either a new analysis data structure _a'_ or
an error as output.

==== Translation Units

For each translation unit _tu_, visit each
definition appearing in _tu_.

==== Definitions

For each constant definition _d_:

. If _d_ is not in the 
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[value map]
of _a_, then

.. Visit each expression appearing in _d_, threading
the analysis through the visits.
Let _a'_ be the resulting analysis.

.. Use the value map of _a'_ to compute the value _v_ of _d_.

.. Let _a''_ be the analysis data structure that results from
adding the mapping from _d_ to _v_ to the value map of _a'_.

.. Yield _a''_ as the result.

. Otherwise we have already visited _d_; yield _a_ as the result.

For each enum definition _d_, check that the enumerated constants
of _d_ all have different values.

==== Type Names and Expressions

For each AST node _n_ that represents an expression:

. Compute the value _v_ of _n_:

.. If the value of _n_ is directly available (for example, the value
of the integer literal `1` is 1), then use that as _v_.

.. Otherwise if _n_ represents a use, then 

... Look in the
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[use-def map]
of _n_ to get the symbol _s_ corresponding
to _n_.
Throw an internal error if it is not there.

... Visit the definition corresponding to _s_.

... Look in the 
https://github.com/fprime-community/fpp/wiki/Analysis-Data-Structure[value map]
of _a_ to get the value _v_ of _s_.
Throw an internal error if it is not there.

... Use _v_ as the value of _n_.

.. Otherwise

... Visit the child expressions of _v_.

... Use the child values to compute the value _v_ of _n_.

. Update the value map with the mapping of _n_ to _v_.

