Below we set forth the plan for the current version of code generation.
As FPP becomes more mature, we will phase out the use of XML.

== XML

*Types:*

. Convert each struct definition to a `SerializableAi.xml` file.

. Convert each enum definition to an `EnumAi.xml` file.

. Convert each array definition to an `ArrayAi.xml` file.

*Ports:* Convert each port definition to a `PortAi.xml` file.

*Components:* Convert each component definition to a `ComponentAi.xml` file.

*Topologies:* Convert each topology definition to a `TopologyAppAi.xml` file.

== {cpp}

*Constants:* Generate a header file `FppConstants.hpp` containing constant definitions.

*Types:* 

. Convert each struct definition to `SerializableAc.{hpp,cpp}` files.

. Convert each enum definition to an `EnumAc.{hpp,cpp}` files.

. Convert each array definition to an `ArrayAc.{hpp,cpp}` files.

*Ports:* Convert each port definition to `PortAc.{hpp,cpp}` files.

*Components:*

. Convert each component definition to `ComponentAc.{hpp,cpp}` files (in development).

. Generate an implementation template for each component definition (in development).

. Generate unit tests files for each component definition (in development).

*Topologies:* Convert each topology definition to `TopologyAc.{hpp,cpp}` files.
